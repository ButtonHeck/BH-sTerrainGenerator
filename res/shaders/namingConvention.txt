In order to keep shader development process more consistent some rules are applied:

1) all input data prefixed with "i_" token, all the data layout location are hardcoded, thus must match exactly
with client C++ code

2) all output data prefixed with "o_" token

3) all uniforms prefixed with "u_" token

4) all data that transferred inside a shader program prefixed with "v_" token and next letter capitalized,
except cases where there is a geometry shader in a pipeline, then to "v_" token added "g" of "f"
dependent on which shader (geometry or fragment) supposed to use that data

5) shader source files containing "_HDR" token in its name are preprocessed and added "#define HDR_ENABLED"
right after "#version" declaration

6) shader source files containing "FC" token in its name are supposed to be used for frustum culling routine

7) "@include <filename.extension>" tokens are used by preprocessor to fetch the code from
the "filename.extension" shader and just paste it in a place where @include token has been found

8) function defined in "included" source files prefixed with "ext_"(external) token,
in order to give a hint to a programmer that this function is in (one of) other included file(s),
the rules 1-4 are the same for these files

9) constants naming is the same as plain C++ naming convention for const

10) local variables have same naming convention as plain C++ naming convention for locals
